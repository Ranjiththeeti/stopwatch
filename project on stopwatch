import tkinter as tk
from datetime import datetime
import time

class StopwatchClockApp:
    def __init__(self, root):
        """
        Initialize the Stopwatch/Clock application.
        
        Parameters:
        - root: Tkinter root window
        """
        self.root = root
        self.root.title("Stopwatch & Clock")
        self.root.geometry("300x250")

        # Stopwatch variables
        self.is_running = False
        self.start_time = 0
        self.elapsed_time = 0

        # Create GUI elements
        self.clock_label = tk.Label(root, text="00:00:00", font=("Arial", 20))
        self.clock_label.pack(pady=10)

        self.stopwatch_label = tk.Label(root, text="00:00:00", font=("Arial", 20))
        self.stopwatch_label.pack(pady=10)

        # Buttons for stopwatch control
        self.start_button = tk.Button(root, text="Start", command=self.start_stopwatch, width=10)
        self.start_button.pack(pady=5)

        self.stop_button = tk.Button(root, text="Stop", command=self.stop_stopwatch, width=10)
        self.stop_button.pack(pady=5)

        self.reset_button = tk.Button(root, text="Reset", command=self.reset_stopwatch, width=10)
        self.reset_button.pack(pady=5)

        # Start updating the clock
        self.update_clock()
        # Initialize stopwatch display
        self.update_stopwatch()

    def update_clock(self):
        """
        Update the clock label with the current time.
        """
        current_time = datetime.now().strftime("%H:%M:%S")
        self.clock_label.config(text=current_time)
        self.root.after(1000, self.update_clock)  # Update every second

    def update_stopwatch(self):
        """
        Update the stopwatch label with elapsed time if running.
        """
        if self.is_running:
            current_elapsed = time.time() - self.start_time + self.elapsed_time
            hours, remainder = divmod(int(current_elapsed), 3600)
            minutes, seconds = divmod(remainder, 60)
            self.stopwatch_label.config(text=f"{hours:02d}:{minutes:02d}:{seconds:02d}")
        self.root.after(1000, self.update_stopwatch)  # Update every second

    def start_stopwatch(self):
        """
        Start the stopwatch if not already running.
        """
        if not self.is_running:
            self.is_running = True
            self.start_time = time.time()
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")

    def stop_stopwatch(self):
        """
        Stop the stopwatch and save elapsed time.
        """
        if self.is_running:
            self.is_running = False
            self.elapsed_time += time.time() - self.start_time
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")

    def reset_stopwatch(self):
        """
        Reset the stopwatch to zero.
        """
        self.is_running = False
        self.elapsed_time = 0
        self.start_time = 0
        self.stopwatch_label.config(text="00:00:00")
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")

def main():
    """
    Main function to launch the application.
    """
    root = tk.Tk()
    app = StopwatchClockApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
